# -*- mode: ruby -*-
# vi: set ft=ruby :

# https://vtorosyan.github.io/ansible-docker-vagrant/

# Fix "debconf debconf/frontend select Noninteractive"
# https://discuss.hashicorp.com/t/how-to-fix-debconf-unable-to-initialize-frontend-dialog-error/39201

# Using docker with Vagrant
# https://subscription.packtpub.com/book/virtualization-&-cloud/9781786464910/1/ch01lvl1sec17/using-docker-with-vagrant 


ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'  # --provider=docker
ENV['VAGRANT_NO_PARALLEL'] = 'yes'   # --no-parallel

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "centos/8"
  #config.vm.box = "jeffnoxon/ubuntu-20.04-arm64"
  #config.vm.box = "axnetlabs/axnetlabs_focal_arm64"   #vmware
  #config.vm.box = "ilker/ubuntu2004"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  #end


  config.vm.define "ansible" do |ansible|
    ansible.vm.network "private_network", type: "static", ip: "192.168.56.10"

    ansible.vm.hostname = "ansible"
    # ansible.vm.playbook = "ufw.yml"
    # ansible.vm.sudo = true

    # Custom configuration for docker
    ansible.vm.provider "docker" do |docker, override|
      # docker doesnt use boxes
      override.vm.box = nil

      # this is where your Dockerfile lives
      docker.build_dir = "."

      # Make sure it sets up ssh with the Dockerfile
      # Vagrant is pretty dependent on ssh
      override.ssh.insert_key = true
      docker.has_ssh = true

      # Configure Docker to allow access to more resources
      docker.privileged = true

      # Add ansible file
      # docker.volumes = ["#{Dir.pwd}/ansible:/home/vagrant/"]
    end

    ansible.vm.provision :shell do |shell|
      shell.path = "install_ansible.sh"
      shell.args = ["master", "192.168.56.10"]
    end
  end
  clients=3
  ram_client=2048
  cpu_client=1
  (1..clients).each do |i|
    config.vm.define "client#{i}" do |client|
    client.vm.network "private_network", type: "static", ip: "192.168.56.1#{i}"
    client.vm.hostname = "client#{i}"

      # Custom configuration for docker
      client.vm.provider "docker" do |docker, override|
        # docker doesnt use boxes
        override.vm.box = nil

        # this is where your Dockerfile lives
        docker.build_dir = "."

        # Make sure it sets up ssh with the Dockerfile
        # Vagrant is pretty dependent on ssh
        override.ssh.insert_key = true
        docker.has_ssh = true

        # Configure Docker to allow access to more resources
        docker.privileged = true

        docker.ports = ["808#{i}:80"]

        # Overload HTTPD index file
        #docker.volumes = ["#{Dir.pwd}/src:/var/www/html"]

        # docker.name = "client#{i}"
        # docker.memory = ram_client
        # docker.cpus = cpu_client
      end

      client.vm.provision :shell do |shell|
        shell.path = "install_ansible.sh"
        shell.args = ["node", "192.168.56.10"]
      end

      # client.vm.provision "ansible" do |ansible|
      #   ansible.compatibility_mode = "2.0"
      #   ansible.limit = "all"
      #   ansible.playbook = "ansible/ufw.yml"
      # end
    end
  end
end
